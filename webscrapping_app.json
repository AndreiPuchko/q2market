{
 "modules": [
  {
   "name": "autorun",
   "script": "# run_form(\"sales\")\r\n# self.run_forms()\r\n# self.run_modules()",
   "comment": "",
   "last_line": "3",
   "q2_time": "20230726141610",
   "q2_mode": "u"
  },
  {
   "name": "error_test.",
   "script": "a=1\r\nb=2\r\n1+\"\"",
   "comment": "print(123)",
   "last_line": "0",
   "q2_time": "20230725232740",
   "q2_mode": "u"
  },
  {
   "name": "load_zip",
   "script": "def worker():\r\n    run_module(\"select_dataset\", import_only=True)\r\n    url = select_dataset()\r\n    if not url:\r\n        return\r\n    # url = \"https://excelbianalytics.com/wp/wp-content/uploads/2017/07/5000-Sales-Records.zip\"\r\n    from urllib import request\r\n    from io import BytesIO, TextIOWrapper\r\n    from zipfile import ZipFile\r\n    from q2gui.q2model import Q2CsvModel\r\n    from q2gui.q2dialogs import q2Mess, q2Wait, q2working\r\n    from datetime import datetime\r\n    import time\r\n    \r\n    \r\n    req = request.Request(url, headers={\"User-Agent\": \"Safari\"})\r\n    \r\n    data = q2working(lambda: request.urlopen(req).read(), \"Loading file...\")\r\n\r\n    mem_zip_file_data = BytesIO()\r\n    mem_zip_file_data.write(data)\r\n    zip_file: ZipFile = ZipFile(mem_zip_file_data)\r\n    csv_file_object = TextIOWrapper(zip_file.open(zip_file.namelist()[0]))\r\n    model = q2working(lambda: Q2CsvModel(csv_file_object=csv_file_object), \"Loading CSV\")\r\n\r\n    q2cursor(\"delete from sales\")\r\n\r\n    keys = list(model.records[0].keys())\r\n    wait=q2wait(len(model.records), \"Inserting records\")\r\n    transaction()\r\n    stime = time.time()\r\n    scounter = 0\r\n    for rec in model.records:\r\n        wait.step(1000)\r\n        scounter += 1\r\n        if scounter%10000 == 0:\r\n            ?time.time() - stime\r\n            stime = time.time()\r\n            scounter = 0\r\n        for col in keys:\r\n            rec[col.lower()] = rec[col]\r\n        rec[\"order_date\"] = datetime.strftime(datetime.strptime(rec[\"order_date\"], \"%m/%d/%Y\"), \"%Y-%m-%d\")\r\n        raw_insert(\"sales\", rec)\r\n        if self.db_data.last_sql_error:\r\n            q2Mess(f\"Error: {self.db_data.last_sql_error}\")\r\n            break\r\n    commit()\r\n    wait.close()\r\n\r\nif __name__ == \"__main__\":\r\n    worker()\r\n    run_form(\"sales\")",
   "comment": "",
   "last_line": "35",
   "q2_time": "20230725210428",
   "q2_mode": "i"
  },
  {
   "name": "manifest",
   "script": "myapp.app_title = \"q2-WebScrapping DEMO\"\nmyapp.app_description = \"Loads some data from Internet and shows some reports\"\nself.app_url = \"https://raw.githubusercontent.com/AndreiPuchko/q2market/main/webscrapping_app\"",
   "comment": "",
   "last_line": "1",
   "q2_time": "20230725210428",
   "q2_mode": "i"
  },
  {
   "name": "matplot-bar",
   "script": "where=\"country like '%land%'\"\r\n\r\ndiver = 1000000\r\n\r\ncu = q2cursor(f\"\"\"\r\n    select  \r\n        sum(round(units_sold*unit_price,2))/{diver} as revenue\r\n        , sum(round(units_sold*unit_cost,2))/{diver} as cost\r\n        , country\r\n    from sales \r\n    where {where} \r\n    group by country\r\n    \"\"\")\r\n    \r\ncountries = [x['country'] for x in cu.records()]\r\nrevenue = [round(num(x['revenue']), 2) for x in cu.records()]\r\nprofit = [round(num(x['revenue']), 2)- round(num(x['cost']), 2) for x in cu.records()]\r\n    \r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\nwidth=0.25\r\n\r\nlocations = np.arange(len(countries))  # the label locations\r\n\r\nfig, ax = plt.subplots()\r\n\r\nrect = ax.bar(locations+width, revenue, width, label=\"Rev\")\r\nrect = ax.bar(locations+width*2, profit, width, label=\"Pro\")\r\n\r\nax.set_ylabel('$')\r\nax.set_xlabel('Countries')\r\nax.set_title('Revenue and profit')\r\nax.legend(loc='upper right', ncols=3)\r\nax.set_xticks(locations + 0.35, countries)\r\n\r\nplt.show()",
   "comment": "",
   "last_line": "22",
   "q2_time": "20230725210428",
   "q2_mode": "i"
  },
  {
   "name": "matplot-pie",
   "script": "where=\"country like '%land%'\"\r\n\r\ndiver = 1000000\r\n\r\ncu = q2cursor(f\"\"\"\r\n    select  \r\n        sum(round(units_sold*unit_price,2))/{diver} as revenue\r\n        , sum(round(units_sold*unit_cost,2))/{diver} as cost\r\n        , item_type as  country\r\n    from sales \r\n    where {where} \r\n    group by country\r\n    limit 400\r\n    \"\"\")\r\n    \r\ncountries = [x['country'][:10] for x in cu.records()]\r\nprofit = [int(round(num(x['revenue']), 2)- round(num(x['cost']), 2)) for x in cu.records()]\r\n    \r\nimport matplotlib.pyplot as plt\r\n\r\nfig, ax = plt.subplots()\r\n\r\n\r\nax.pie(profit, labels=countries)\r\n\r\nplt.show()\r\n\r\n\r\nimport io\r\nimport base64\r\nmy_stringIObytes = io.BytesIO()\r\nplt.savefig(my_stringIObytes, format='jpg')\r\nmy_stringIObytes.seek(0)\r\nmy_base64_jpgData = base64.b64encode(my_stringIObytes.read()).decode()",
   "comment": "",
   "last_line": "25",
   "q2_time": "20230725210428",
   "q2_mode": "i"
  },
  {
   "name": "pip_test",
   "script": "def update_from_git(package=\"\"):\r\n    from q2terminal.q2terminal import Q2Terminal\r\n    def callback(data):\r\n        ?data\r\n    trm = Q2Terminal(callback=callback)\r\n    executable = sys.executable.replace(\"w.exe\", \".exe\")\r\n    for x in q2_modules:\r\n        if not x.startswith(\"q2\"):\r\n            continue\r\n        if package and x != package:\r\n            continue\r\n        # trm.run(f\"{executable} -m pip show {x}\")[0]\r\n        # ?trm.run(f\"{executable} -m pip uninstall {x} -y\")\r\n        ?trm.run(f\"{executable} -m pip install  --upgrade --force-reinstall git+https://github.com/AndreiPuchko/{x}.git\")\r\n    ?\"Done\"\r\n            \r\nupdate_from_git(\"q2report\")",
   "comment": "",
   "last_line": "12",
   "q2_time": "20230725210428",
   "q2_mode": "i"
  },
  {
   "name": "q2plot",
   "script": "class q2plot:\r\n    import matplotlib.pyplot as plt\r\n    import io\r\n    import base64\r\n    self.plt = plt\r\n    self.io = io\r\n    self.base64 = base64\r\n\r\n    def __init__(self, dataset):\r\n        if isinstance(dataset, type((lambda: (yield))())):\r\n            self.dataset = [x for x in dataset]\r\n        else:\r\n            self.dataset = dataset\r\n\r\n    def get_jpg(self):\r\n        plot_bytes = self.io.BytesIO()\r\n        self.plt.savefig(plot_bytes, format='jpg')\r\n        plot_bytes.seek(0)\r\n        return self.base64.b64encode(plot_bytes.read()).decode()\r\n\r\n    def pie(self, show=False):\r\n        labels = [x['x'] for x in self.dataset]\r\n        dataset = [num(x['d']) for x in self.dataset]\r\n\r\n        fig, ax = self.plt.subplots()\r\n        ax.pie(dataset, labels=labels)\r\n\r\n        plot_jpg = self.get_jpg()\r\n        if show:\r\n            self.plt.show()\r\n        else:\r\n            self.plt.close()\r\n        return plot_jpg\r\n\r\n    def bar(self, show=False):\r\n        legend = [x['x'] for x in self.dataset]\r\n        dataset = [num(x['d']) for x in self.dataset]\r\n\r\n        labels = [x+1 for x in range(len(legend))]\r\n\r\n        fig, ax = self.plt.subplots()\r\n        ax.bar(labels, dataset)\r\n        # fig.text(0.2, 0.2 ,\"\\n\".join([f\"{x+1}.{legend[x]}\" for x in range(len(legend))]))\r\n\r\n        plot_jpg = self.get_jpg()\r\n        if show:\r\n            self.plt.show()\r\n        else:\r\n            self.plt.close()\r\n        return plot_jpg\r\n\r\n\r\n\r\nmyapp.heap.q2plot= q2plot\r\n\r\nif __name__ == \"__main__\":\r\n    cu = q2cursor(f\"\"\"\r\n                    select  \r\n                        region as x\r\n                        , round(avg(unit_price),2) as d\r\n                    from sales \r\n                    group by 1\r\n                    \"\"\")\r\n    \r\n    q2plot(cu.records()).pie(1)\r\n    # q2plot(cu.records()).bar(1)",
   "comment": "",
   "last_line": "49",
   "q2_time": "20230725210428",
   "q2_mode": "i"
  },
  {
   "name": "select_dataset",
   "script": "def select_dataset():\r\n    from urllib import request\r\n    from q2rad.q2utils import q2choice\r\n\r\n    url = \"https://excelbianalytics.com/wp/downloads-18-sample-csv-files-data-sets-for-testing-sales/\"\r\n    req = request.Request(url, headers={\"User-Agent\": \"Safari\"})\r\n    data = str(q2working(lambda: request.urlopen(req).read(), \"Loading webpage...\"))\r\n\r\n    links = []\r\n    for x in data.split('<a href=\"'):\r\n        link = x.split('\">')[0]\r\n        if \".zip\" in link:\r\n            links.append({\"link\": link})\r\n    rez = q2choice(links, column_title=\"Dataset links\")\r\n    return rez\r\nif __name__ == \"__main__\":\r\n    print(select_dataset())",
   "comment": "",
   "last_line": "16",
   "q2_time": "20230725210428",
   "q2_mode": "i"
  },
  {
   "name": "version",
   "script": "self.app_version = '2023-07-26 14:16:17'",
   "comment": "",
   "last_line": "0",
   "q2_time": "20230726141617",
   "q2_mode": "u"
  }
 ],
 "forms": [
  {
   "name": "af",
   "title": "Sales filter",
   "seq": "1",
   "menu_path": "Data",
   "menu_text": "Sales",
   "menu_before": "",
   "menu_tiptext": "",
   "menu_separator": "",
   "toolbar": "*",
   "ok_button": "",
   "cancel_button": "",
   "form_table": "",
   "form_table_sort": "",
   "comment": "",
   "before_form_build": "auto_filter(\"sales\", mem)",
   "before_grid_build": "",
   "before_grid_show": "",
   "after_grid_show": "",
   "before_form_show": "mem.s.unit_price1 = 3\r\nmem.s.unit_price2 = 60\r\n# mem.w.unit_price1.get_check().set_checked()\r\n\r\nmem.s.region = \"As\"\r\n# mem.w.region.get_check().set_checked()",
   "after_form_show": "",
   "before_crud_save": "",
   "after_crud_save": "",
   "before_delete": "",
   "after_delete": "",
   "form_valid": "",
   "after_form_closed": "",
   "q2_time": "20230726141322",
   "q2_mode": "u",
   "no_view_action": "",
   "view_action": "",
   "form_refresh": "",
   "menu_icon": "$"
  },
  {
   "name": "dataset_clear",
   "title": "",
   "seq": "5",
   "menu_path": "Perform",
   "menu_text": "Clear dataset",
   "menu_before": "",
   "menu_tiptext": "",
   "menu_separator": "*",
   "toolbar": "",
   "ok_button": "",
   "cancel_button": "",
   "form_table": "",
   "form_table_sort": "",
   "comment": "",
   "before_form_build": "",
   "before_grid_build": "",
   "before_grid_show": "",
   "after_grid_show": "",
   "before_form_show": "if q2ask(\"Delete all records?\") == 2:\r\n    q2cursor(\"delete from sales\")\r\nreturn False",
   "after_form_show": "",
   "before_crud_save": "",
   "after_crud_save": "",
   "before_delete": "",
   "after_delete": "",
   "form_valid": "",
   "after_form_closed": "",
   "q2_time": "20230726123944",
   "q2_mode": "u",
   "no_view_action": "",
   "view_action": "",
   "form_refresh": "",
   "menu_icon": ""
  },
  {
   "name": "dataset_load",
   "title": "",
   "seq": "4",
   "menu_path": "Perform",
   "menu_text": "Download dataset",
   "menu_before": "",
   "menu_tiptext": "",
   "menu_separator": "",
   "toolbar": "",
   "ok_button": "",
   "cancel_button": "",
   "form_table": "",
   "form_table_sort": "",
   "comment": "",
   "before_form_build": "",
   "before_grid_build": "",
   "before_grid_show": "",
   "after_grid_show": "",
   "before_form_show": "def worker():\r\n    from urllib import request\r\n    from io import BytesIO, TextIOWrapper\r\n    from zipfile import ZipFile\r\n    from q2gui.q2model import Q2CsvModel\r\n    from q2gui.q2dialogs import q2Mess, q2Wait, q2working\r\n    from datetime import datetime\r\n\r\n    from q2rad.q2utils import q2choice\r\n\r\n    url = \"https://excelbianalytics.com/wp/downloads-18-sample-csv-files-data-sets-for-testing-sales/\"\r\n    req = request.Request(url, headers={\"User-Agent\": \"Safari\"})\r\n    data = str(q2working(lambda: request.urlopen(req).read(), \"Loading webpage...\"))\r\n\r\n    links = []\r\n    for x in data.split('<a href=\"'):\r\n        link = x.split('\">')[0]\r\n        if \".zip\" in link:\r\n            links.append({\"link\": link})\r\n    url = q2choice(links)\r\n    if not url:\r\n        return\r\n    # url = \"https://excelbianalytics.com/wp/wp-content/uploads/2017/07/5000-Sales-Records.zip\"\r\n\r\n\r\n\r\n    req = request.Request(url, headers={\"User-Agent\": \"Safari\"})\r\n\r\n    data = q2working(lambda: request.urlopen(req).read(), \"Loading file...\")\r\n\r\n    mem_zip_file_data = BytesIO()\r\n    mem_zip_file_data.write(data)\r\n    zip_file: ZipFile = ZipFile(mem_zip_file_data)\r\n    csv_file_object = TextIOWrapper(zip_file.open(zip_file.namelist()[0]))\r\n    model = q2working(lambda: Q2CsvModel(csv_file_object=csv_file_object), \"Downloading CSV\")\r\n\r\n    q2cursor(\"delete from sales\")\r\n\r\n    keys = list(model.records[0].keys())\r\n    wait=q2wait(len(model.records), \"Inserting records\")\r\n    transaction()\r\n    for rec in model.records:\r\n        wait.step(1000)\r\n        for col in keys:\r\n            rec[col.lower()] = rec[col]\r\n        rec[\"order_date\"] = datetime.strftime(datetime.strptime(rec[\"order_date\"], \"%m/%d/%Y\"), \"%Y-%m-%d\")\r\n        raw_insert(\"sales\", rec)\r\n    commit()\r\n    wait.close()\r\n    return \"Done\"\r\n\r\nworker()\r\nreturn False",
   "after_form_show": "",
   "before_crud_save": "",
   "after_crud_save": "",
   "before_delete": "",
   "after_delete": "",
   "form_valid": "",
   "after_form_closed": "",
   "q2_time": "20230726123944",
   "q2_mode": "u",
   "no_view_action": "",
   "view_action": "",
   "form_refresh": "",
   "menu_icon": ""
  },
  {
   "name": "plot",
   "title": "Diagram",
   "seq": "3",
   "menu_path": "",
   "menu_text": "",
   "menu_before": "",
   "menu_tiptext": "",
   "menu_separator": "",
   "toolbar": "",
   "ok_button": "",
   "cancel_button": "*",
   "form_table": "",
   "form_table_sort": "",
   "comment": "",
   "before_form_build": "mem.heap.active = False\r\n\r\ndef select_data_and_build_chart(mem=mem):\r\n    if mem.heap.active is False:\r\n        return\r\n    mem.heap.active = False\r\n    if mem.s.x_column == \"\" or mem.s.d_column ==\"\":\r\n        return\r\n    x = mem.heap.form_column_list[int(mem.s.x_column)-1]\r\n    d = mem.heap.form_column_list[int(mem.s.d_column)-1]\r\n \r\n    where  = f\" where {mem.heap.where}\" if hasattr(mem.heap, \"where\") and mem.heap.where else \"\"\r\n    cu = q2cursor(f\"\"\"\r\n                        select  \r\n                            {x} as x\r\n                            , sum({d}) as d\r\n                        from sales \r\n                        {where}\r\n                        group by 1\r\n                        \"\"\")\r\n\r\n    mem.heap.grid_form.model.set_cursor(cu)\r\n    mem.heap.grid_form.refresh()\r\n    mem.heap.build_chart()\r\n   \r\nmem.heap.select_data_and_build_chart = select_data_and_build_chart\r\n\r\ndef build_chart(mem=mem):\r\n    import q2plot\r\n    cu = mem.heap.grid_form.model.cursor\r\n    if num(mem.s.plottype) == 1:\r\n        mem.s.chart = q2plot(cu.records()).bar()\r\n    if num(mem.s.plottype) == 2:\r\n        mem.s.chart = q2plot(cu.records()).pie()\r\n    mem.heap.active = True\r\n    return mem.s.chart\r\nmem.heap.build_chart = build_chart\r\n\r\n\r\nfrom q2gui.q2model import Q2CursorModel\r\nmem.heap.grid_form = Q2Form(\"plot\")\r\nmem.heap.grid_form.i_am_child = True\r\nmem.heap.grid_form.add_control(\"x\", \"X-axis\", datalen=50)\r\nmem.heap.grid_form.add_control(\"d\", \"Value\", datatype=\"num\", datalen=15, pic=\"F\")\r\n\r\ndef print_diagram(mem=mem):\r\n    def worker():\r\n        from q2report.q2report import Q2Report, Q2Report_rows, re_q2image\r\n        import q2plot\r\n        image_data = mem.s.chart\r\n        report = get_report()\r\n        report.add_columns(widths=[\"70%\", 0])\r\n\r\n        report.set_cell(0, 0, \"Diagram\", colspan=2, style=report.make_style(border_width=\"0\", text_align=\"center\", font_size=20))\r\n        report.set_cell(1, 0, \"{q2image('%s', 18)}\" % image_data, colspan=2, style=report.make_style(border_width=\"0\"))\r\n        \r\n        table_row = Q2Report_rows(role=\"table\", data_source=\"cursor\", style=report.make_style(font_size=10, border_width=\"1\"))\r\n        table_row.set_cell(0,1, \"{d}\", style=report.make_style(text_align=\"right\"), format=\"F0\")\r\n        table_row.set_cell(0,0, \"{_row_number}. {x}\", style=report.make_style(text_align=\"left\"))\r\n        \r\n        table_header = Q2Report_rows(style=report.make_style(font_size=10, text_align=\"center\"))\r\n        table_header.set_cell(0,0, \"Data values\", colspan=2)\r\n        \r\n        table_total = Q2Report_rows(role=\"table\", data_source=\"cursor\", style=report.make_style(font_size=10, border_width=\"1\"))\r\n        table_total.set_cell(0, 0, \"Total\", style=report.make_style(text_align=\"right\", font_weight=\"bold\"))\r\n        table_total.set_cell(0, 1, \"{sum:num(d)}\", style=report.make_style(text_align=\"right\", font_weight=\"bold\"), format=\"F0\")\r\n        table_row.set_table_footer(table_total)\r\n        table_row.set_table_header(table_header)\r\n        report.add_rows(rows=table_row)\r\n        \r\n        report.data_sets[\"cursor\"] = [x for x in mem.heap.grid_form.model.get_records()]\r\n        \r\n        report.run(\"temp/repo.docx\")\r\n    return worker\r\n\r\nmem.heap.print_diagram = print_diagram\r\n\r\nmem.heap.grid_form.add_action(\"Print\", mem.heap.print_diagram())\r\nmem.heap.grid_form.set_model(Q2CursorModel(q2cursor()))\r\nmem.heap.grid_form.form_refresh = mem.heap.build_chart\r\nmem.controls.get(\"grid\")[\"widget\"] = mem.heap.grid_form",
   "before_grid_build": "",
   "before_grid_show": "",
   "after_grid_show": "",
   "before_form_show": "def form_show(mem=mem):\r\n    from q2gui.q2app import Q2Controls\r\n    mem.heap.form_name = \"sales\"\r\n    cu = q2cursor(\r\n                f\"\"\"\r\n                    select *\r\n                    from `lines`\r\n                    where name  = '{mem.heap.form_name}'\r\n                        and migrate<>''\r\n                        and (label <>'' or gridlabel <> '')\r\n                    order by seq\r\n                \"\"\", mem.q2_app.db_logic)\r\n\r\n    for col in cu.records():\r\n        col = Q2Controls.validate(col)\r\n\r\n    mem.heap.form_label_list = [f\"{x['label'] if x['label'] else x['gridlabel']}\" for x in cu.records()]\r\n    mem.heap.form_column_list = [f\"{x['column']}\" for x in cu.records()]\r\n\r\n    mem.w.x_column.set_data(mem.heap.form_label_list)\r\n    mem.w.d_column.set_data(mem.heap.form_label_list)\r\n\r\n    mem.s.x_column = 0\r\n    mem.s.d_column = 6\r\n    mem.heap.active = True\r\n    mem.heap.select_data_and_build_chart()\r\n    \r\nform_show()",
   "after_form_show": "",
   "before_crud_save": "",
   "after_crud_save": "",
   "before_delete": "",
   "after_delete": "",
   "form_valid": "",
   "after_form_closed": "",
   "q2_time": "20230726123940",
   "q2_mode": "u",
   "no_view_action": "",
   "view_action": "",
   "form_refresh": "",
   "menu_icon": ""
  },
  {
   "name": "sales",
   "title": "Sales",
   "seq": "2",
   "menu_path": "",
   "menu_text": "",
   "menu_before": "",
   "menu_tiptext": "",
   "menu_separator": "",
   "toolbar": "*",
   "ok_button": "",
   "cancel_button": "",
   "form_table": "sales",
   "form_table_sort": "units_sold",
   "comment": "",
   "before_form_build": "",
   "before_grid_build": "",
   "before_grid_show": "",
   "after_grid_show": "",
   "before_form_show": "",
   "after_form_show": "",
   "before_crud_save": "",
   "after_crud_save": "",
   "before_delete": "",
   "after_delete": "",
   "form_valid": "",
   "after_form_closed": "",
   "q2_time": "20230726124403",
   "q2_mode": "u",
   "no_view_action": "",
   "view_action": "*",
   "form_refresh": "",
   "menu_icon": ""
  }
 ],
 "lines": [
  {
   "id": "120",
   "name": "plot",
   "column": "x_column",
   "label": "X-column",
   "gridlabel": "",
   "seq": "2",
   "nogrid": "",
   "noform": "",
   "check": "",
   "disabled": "",
   "readonly": "",
   "control": "combo",
   "pic": "",
   "datatype": "int",
   "datalen": "0",
   "datadec": "0",
   "migrate": "",
   "pk": "",
   "ai": "",
   "to_table": "",
   "to_column": "",
   "related": "",
   "to_form": "",
   "comment": "",
   "code_when": "",
   "code_show": "",
   "code_valid": "mem.heap.select_data_and_build_chart()",
   "q2_time": "20230725210428",
   "q2_mode": "i",
   "toolbar": "",
   "tag": ""
  },
  {
   "id": "121",
   "name": "plot",
   "column": "/v",
   "label": "",
   "gridlabel": "",
   "seq": "0",
   "nogrid": "",
   "noform": "",
   "check": "",
   "disabled": "",
   "readonly": "",
   "control": "line",
   "pic": "",
   "datatype": "char",
   "datalen": "0",
   "datadec": "0",
   "migrate": "",
   "pk": "",
   "ai": "",
   "to_table": "",
   "to_column": "",
   "related": "",
   "to_form": "",
   "comment": "",
   "code_when": "",
   "code_show": "",
   "code_valid": "",
   "q2_time": "20230725210428",
   "q2_mode": "i",
   "toolbar": "",
   "tag": ""
  },
  {
   "id": "122",
   "name": "plot",
   "column": "/",
   "label": "",
   "gridlabel": "",
   "seq": "7",
   "nogrid": "",
   "noform": "",
   "check": "",
   "disabled": "",
   "readonly": "",
   "control": "line",
   "pic": "",
   "datatype": "char",
   "datalen": "0",
   "datadec": "0",
   "migrate": "",
   "pk": "",
   "ai": "",
   "to_table": "",
   "to_column": "",
   "related": "",
   "to_form": "",
   "comment": "",
   "code_when": "",
   "code_show": "",
   "code_valid": "",
   "q2_time": "20230725210428",
   "q2_mode": "i",
   "toolbar": "",
   "tag": ""
  },
  {
   "id": "123",
   "name": "plot",
   "column": "/h",
   "label": "",
   "gridlabel": "",
   "seq": "1",
   "nogrid": "",
   "noform": "",
   "check": "",
   "disabled": "",
   "readonly": "",
   "control": "line",
   "pic": "",
   "datatype": "char",
   "datalen": "0",
   "datadec": "0",
   "migrate": "",
   "pk": "",
   "ai": "",
   "to_table": "",
   "to_column": "",
   "related": "",
   "to_form": "",
   "comment": "",
   "code_when": "",
   "code_show": "",
   "code_valid": "",
   "q2_time": "20230725210428",
   "q2_mode": "i",
   "toolbar": "",
   "tag": ""
  },
  {
   "id": "124",
   "name": "plot",
   "column": "grid",
   "label": "",
   "gridlabel": "",
   "seq": "11",
   "nogrid": "",
   "noform": "",
   "check": "",
   "disabled": "",
   "readonly": "",
   "control": "widget",
   "pic": "",
   "datatype": "char",
   "datalen": "0",
   "datadec": "0",
   "migrate": "",
   "pk": "",
   "ai": "",
   "to_table": "",
   "to_column": "",
   "related": "",
   "to_form": "",
   "comment": "",
   "code_when": "",
   "code_show": "",
   "code_valid": "",
   "q2_time": "20230725210429",
   "q2_mode": "i",
   "toolbar": "",
   "tag": ""
  },
  {
   "id": "125",
   "name": "plot",
   "column": "chart",
   "label": "",
   "gridlabel": "",
   "seq": "10",
   "nogrid": "",
   "noform": "",
   "check": "",
   "disabled": "",
   "readonly": "",
   "control": "image",
   "pic": "",
   "datatype": "char",
   "datalen": "0",
   "datadec": "0",
   "migrate": "",
   "pk": "",
   "ai": "",
   "to_table": "",
   "to_column": "",
   "related": "",
   "to_form": "",
   "comment": "",
   "code_when": "",
   "code_show": "",
   "code_valid": "",
   "q2_time": "20230725210429",
   "q2_mode": "i",
   "toolbar": "",
   "tag": ""
  },
  {
   "id": "126",
   "name": "plot",
   "column": "d_column",
   "label": "Data column",
   "gridlabel": "",
   "seq": "3",
   "nogrid": "",
   "noform": "",
   "check": "",
   "disabled": "",
   "readonly": "",
   "control": "combo",
   "pic": "",
   "datatype": "int",
   "datalen": "0",
   "datadec": "0",
   "migrate": "",
   "pk": "",
   "ai": "",
   "to_table": "",
   "to_column": "",
   "related": "",
   "to_form": "",
   "comment": "",
   "code_when": "",
   "code_show": "",
   "code_valid": "mem.heap.select_data_and_build_chart()",
   "q2_time": "20230725210429",
   "q2_mode": "i",
   "toolbar": "",
   "tag": ""
  },
  {
   "id": "127",
   "name": "plot",
   "column": "/",
   "label": "",
   "gridlabel": "",
   "seq": "12",
   "nogrid": "",
   "noform": "",
   "check": "",
   "disabled": "",
   "readonly": "",
   "control": "line",
   "pic": "",
   "datatype": "char",
   "datalen": "0",
   "datadec": "0",
   "migrate": "",
   "pk": "",
   "ai": "",
   "to_table": "",
   "to_column": "",
   "related": "",
   "to_form": "",
   "comment": "",
   "code_when": "",
   "code_show": "",
   "code_valid": "",
   "q2_time": "20230725210429",
   "q2_mode": "i",
   "toolbar": "",
   "tag": ""
  },
  {
   "id": "128",
   "name": "plot",
   "column": "/vs",
   "label": "",
   "gridlabel": "",
   "seq": "9",
   "nogrid": "",
   "noform": "",
   "check": "",
   "disabled": "",
   "readonly": "",
   "control": "line",
   "pic": "",
   "datatype": "char",
   "datalen": "0",
   "datadec": "0",
   "migrate": "",
   "pk": "",
   "ai": "",
   "to_table": "",
   "to_column": "",
   "related": "",
   "to_form": "",
   "comment": "",
   "code_when": "",
   "code_show": "",
   "code_valid": "",
   "q2_time": "20230725210429",
   "q2_mode": "i",
   "toolbar": "",
   "tag": ""
  },
  {
   "id": "129",
   "name": "plot",
   "column": "plottype",
   "label": "",
   "gridlabel": "",
   "seq": "6",
   "nogrid": "",
   "noform": "",
   "check": "",
   "disabled": "",
   "readonly": "",
   "control": "radio",
   "pic": "Bar;Pie",
   "datatype": "int",
   "datalen": "0",
   "datadec": "0",
   "migrate": "",
   "pk": "",
   "ai": "",
   "to_table": "",
   "to_column": "",
   "related": "",
   "to_form": "",
   "comment": "",
   "code_when": "",
   "code_show": "",
   "code_valid": "mem.heap.build_chart()",
   "q2_time": "20230725210429",
   "q2_mode": "i",
   "toolbar": "",
   "tag": ""
  },
  {
   "id": "130",
   "name": "plot",
   "column": "/s",
   "label": "",
   "gridlabel": "",
   "seq": "4",
   "nogrid": "",
   "noform": "",
   "check": "",
   "disabled": "",
   "readonly": "",
   "control": "line",
   "pic": "",
   "datatype": "char",
   "datalen": "0",
   "datadec": "0",
   "migrate": "",
   "pk": "",
   "ai": "",
   "to_table": "",
   "to_column": "",
   "related": "",
   "to_form": "",
   "comment": "",
   "code_when": "",
   "code_show": "",
   "code_valid": "",
   "q2_time": "20230725210429",
   "q2_mode": "i",
   "toolbar": "",
   "tag": ""
  },
  {
   "id": "131",
   "name": "sales",
   "column": "id",
   "label": "",
   "gridlabel": "",
   "seq": "1",
   "nogrid": "*",
   "noform": "*",
   "check": "",
   "disabled": "",
   "readonly": "",
   "control": "line",
   "pic": "",
   "datatype": "int",
   "datalen": "0",
   "datadec": "0",
   "migrate": "*",
   "pk": "*",
   "ai": "*",
   "to_table": "",
   "to_column": "",
   "related": "",
   "to_form": "",
   "comment": "",
   "code_when": "",
   "code_show": "",
   "code_valid": "",
   "q2_time": "20230726123938",
   "q2_mode": "u",
   "toolbar": "",
   "tag": ""
  },
  {
   "id": "132",
   "name": "sales",
   "column": "region",
   "label": "Region",
   "gridlabel": "",
   "seq": "2",
   "nogrid": "",
   "noform": "",
   "check": "",
   "disabled": "",
   "readonly": "",
   "control": "line",
   "pic": "",
   "datatype": "char",
   "datalen": "50",
   "datadec": "0",
   "migrate": "*",
   "pk": "",
   "ai": "",
   "to_table": "",
   "to_column": "",
   "related": "",
   "to_form": "",
   "comment": "",
   "code_when": "",
   "code_show": "",
   "code_valid": "",
   "q2_time": "20230726123938",
   "q2_mode": "u",
   "toolbar": "",
   "tag": ""
  },
  {
   "id": "133",
   "name": "sales",
   "column": "country",
   "label": "Country",
   "gridlabel": "",
   "seq": "4",
   "nogrid": "",
   "noform": "",
   "check": "",
   "disabled": "",
   "readonly": "",
   "control": "line",
   "pic": "",
   "datatype": "char",
   "datalen": "50",
   "datadec": "0",
   "migrate": "*",
   "pk": "",
   "ai": "",
   "to_table": "",
   "to_column": "",
   "related": "",
   "to_form": "",
   "comment": "",
   "code_when": "",
   "code_show": "",
   "code_valid": "",
   "q2_time": "20230726123938",
   "q2_mode": "u",
   "toolbar": "",
   "tag": ""
  },
  {
   "id": "134",
   "name": "sales",
   "column": "item_type",
   "label": "Item Type",
   "gridlabel": "",
   "seq": "3",
   "nogrid": "",
   "noform": "",
   "check": "",
   "disabled": "",
   "readonly": "",
   "control": "line",
   "pic": "",
   "datatype": "char",
   "datalen": "50",
   "datadec": "0",
   "migrate": "*",
   "pk": "",
   "ai": "",
   "to_table": "",
   "to_column": "",
   "related": "",
   "to_form": "",
   "comment": "",
   "code_when": "",
   "code_show": "",
   "code_valid": "",
   "q2_time": "20230726123938",
   "q2_mode": "u",
   "toolbar": "",
   "tag": ""
  },
  {
   "id": "135",
   "name": "sales",
   "column": "sales_channel",
   "label": "Sales Channel",
   "gridlabel": "",
   "seq": "5",
   "nogrid": "",
   "noform": "",
   "check": "",
   "disabled": "",
   "readonly": "",
   "control": "line",
   "pic": "",
   "datatype": "char",
   "datalen": "50",
   "datadec": "0",
   "migrate": "*",
   "pk": "",
   "ai": "",
   "to_table": "",
   "to_column": "",
   "related": "",
   "to_form": "",
   "comment": "",
   "code_when": "",
   "code_show": "",
   "code_valid": "",
   "q2_time": "20230726123938",
   "q2_mode": "u",
   "toolbar": "",
   "tag": ""
  },
  {
   "id": "136",
   "name": "sales",
   "column": "order_date",
   "label": "Order Date",
   "gridlabel": "",
   "seq": "6",
   "nogrid": "",
   "noform": "",
   "check": "",
   "disabled": "",
   "readonly": "",
   "control": "line",
   "pic": "",
   "datatype": "date",
   "datalen": "10",
   "datadec": "0",
   "migrate": "*",
   "pk": "",
   "ai": "",
   "to_table": "",
   "to_column": "",
   "related": "",
   "to_form": "",
   "comment": "",
   "code_when": "",
   "code_show": "",
   "code_valid": "",
   "q2_time": "20230726123938",
   "q2_mode": "u",
   "toolbar": "",
   "tag": ""
  },
  {
   "id": "137",
   "name": "sales",
   "column": "units_sold",
   "label": "Units Sold",
   "gridlabel": "",
   "seq": "7",
   "nogrid": "",
   "noform": "",
   "check": "",
   "disabled": "",
   "readonly": "",
   "control": "line",
   "pic": "",
   "datatype": "num",
   "datalen": "15",
   "datadec": "3",
   "migrate": "*",
   "pk": "",
   "ai": "",
   "to_table": "",
   "to_column": "",
   "related": "",
   "to_form": "",
   "comment": "",
   "code_when": "",
   "code_show": "",
   "code_valid": "",
   "q2_time": "20230726123938",
   "q2_mode": "u",
   "toolbar": "",
   "tag": ""
  },
  {
   "id": "138",
   "name": "sales",
   "column": "unit_price",
   "label": "Unit Price",
   "gridlabel": "",
   "seq": "8",
   "nogrid": "",
   "noform": "",
   "check": "",
   "disabled": "",
   "readonly": "",
   "control": "line",
   "pic": "",
   "datatype": "num",
   "datalen": "15",
   "datadec": "2",
   "migrate": "*",
   "pk": "",
   "ai": "",
   "to_table": "",
   "to_column": "",
   "related": "",
   "to_form": "",
   "comment": "",
   "code_when": "",
   "code_show": "",
   "code_valid": "",
   "q2_time": "20230726123938",
   "q2_mode": "u",
   "toolbar": "",
   "tag": ""
  },
  {
   "id": "139",
   "name": "sales",
   "column": "unit_cost",
   "label": "Unit Cost",
   "gridlabel": "",
   "seq": "9",
   "nogrid": "",
   "noform": "",
   "check": "",
   "disabled": "",
   "readonly": "",
   "control": "line",
   "pic": "",
   "datatype": "num",
   "datalen": "15",
   "datadec": "2",
   "migrate": "*",
   "pk": "",
   "ai": "",
   "to_table": "",
   "to_column": "",
   "related": "",
   "to_form": "",
   "comment": "",
   "code_when": "",
   "code_show": "",
   "code_valid": "",
   "q2_time": "20230726123938",
   "q2_mode": "u",
   "toolbar": "",
   "tag": ""
  }
 ],
 "queries": [
  {
   "name": "",
   "content": "{\n  \"queries\": {\n    \"new_query\": \"select * from sales limit 1000\"\n  },\n  \"params\": {}\n}",
   "comment": "",
   "q2_time": "20230725232833",
   "q2_mode": "u"
  }
 ],
 "actions": [
  {
   "id": "18",
   "name": "sales",
   "action_text": "Diagram",
   "seq": "1",
   "action_mode": "2",
   "action_mess": "",
   "action_icon": "\ud83d\udcca",
   "action_key": "",
   "eof_disabled": "*",
   "child_form": "",
   "child_where": "",
   "child_noshow": "",
   "child_copy_mode": "1",
   "action_worker": "form = self.get_form(\"plot\")\r\nform.heap.where = mem.model.cursor.where\r\nform.run()",
   "comment": "",
   "q2_time": "20230725231700",
   "q2_mode": "u",
   "toolbar": "",
   "tag": ""
  },
  {
   "id": "19",
   "name": "sales",
   "action_text": "",
   "seq": "0",
   "action_mode": "1",
   "action_mess": "",
   "action_icon": "",
   "action_key": "",
   "eof_disabled": "",
   "child_form": "",
   "child_where": "",
   "child_noshow": "",
   "child_copy_mode": "1",
   "action_worker": "",
   "comment": "",
   "q2_time": "20230725210429",
   "q2_mode": "i",
   "toolbar": "",
   "tag": ""
  }
 ],
 "reports": [
  {
   "name": "",
   "content": "{\n  \"queries\": {\n    \"new_query\": \"select * from sales limit 100\"\n  },\n  \"params\": {},\n  \"pages\": [\n    {\n      \"columns\": [\n        {\n          \"rows\": [\n            {\n              \"role\": \"free\",\n              \"data_source\": \"\",\n              \"groupby\": \"\",\n              \"table_groups\": [],\n              \"print_when\": \"\",\n              \"print_after\": \"\",\n              \"new_page_before\": \"\",\n              \"new_page_after\": \"\",\n              \"heights\": [\n                \"0-0\"\n              ],\n              \"cells\": {}\n            }\n          ],\n          \"widths\": [\n            \"50%\",\n            \"2\",\n            \"0\"\n          ]\n        }\n      ],\n      \"page_width\": 21.0,\n      \"page_height\": 29.0,\n      \"page_margin_left\": 2.0,\n      \"page_margin_top\": 2.0,\n      \"page_margin_right\": 1.0,\n      \"page_margin_bottom\": 2.0\n    }\n  ],\n  \"style\": {\n    \"font-family\": \"Arial\",\n    \"font-size\": \"8pt\",\n    \"font-weight\": \"normal\",\n    \"border-width\": \"0 0 0 0\",\n    \"padding\": \"0.05cm 0.05cm 0.05cm 0.05cm\",\n    \"text-align\": \"left\",\n    \"vertical-align\": \"top\"\n  }\n}",
   "comment": "",
   "q2_time": "20230725233037",
   "q2_mode": "u"
  }
 ],
 "packages": [
  {
   "package_name": "matplotlib",
   "package_version": "",
   "comment": "",
   "q2_time": "20230629230617",
   "q2_mode": "i"
  }
 ]
}